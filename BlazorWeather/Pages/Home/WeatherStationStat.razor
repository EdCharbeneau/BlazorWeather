@inject DisplayHelper DH

<div class="stat-box" @onclick="SwitchStat">
    <WeatherStatIcon WeatherStat="stat" />
    <div class="mt-auto mb-1 text-xl">
        <span class="text-4xl">@GetWeatherStat()</span> @GetStatUnit()
    </div>
    <div class="text-xs">
        From
        <div class="stat-source">@WeatherStation.Name</div>
    </div>
</div>

@code {
    static WeatherStat defaultStat = WeatherStat.Temperature;
    WeatherStat stat = defaultStat;

    [Parameter]
    public WeatherStation WeatherStation { get; set;  }

    protected override void OnInitialized()
    {
        defaultStat = NextStat(defaultStat);
    }

    public void SwitchStat()
    {
        stat = NextStat(stat);
    }

    string GetWeatherStat()
    {
        switch (stat)
        {
            case WeatherStat.WindSpeed:
                return DH.ConvertSpeed(WeatherStation.CurrentWeather.WindSpeed).ToString();
            case WeatherStat.Temperature:
                return DH.Convert(WeatherStation.CurrentWeather.Temperature).Value.ToString();
            case WeatherStat.RelativeHumidity:
                return WeatherStation.CurrentWeather.RelativeHumidity.ToString();
            default:
                throw new InvalidOperationException("Unknown stat");
        }
    }

    string GetStatUnit()
    {
        switch (stat)
        {
            case WeatherStat.WindSpeed:
                return DH.SpeedUnit();
            case WeatherStat.Temperature:
                return $"˚{DH.TempUnit()}";
            case WeatherStat.RelativeHumidity:
                return "%";
            default:
                throw new InvalidOperationException("Unknown stat");
        }
    }

    static WeatherStat NextStat(WeatherStat stat)
         => (WeatherStat)(((int) stat + 1) % Enum.GetNames<WeatherStat>().Length);

}